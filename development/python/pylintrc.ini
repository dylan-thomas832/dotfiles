[MAIN]

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once). You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable=
    missing-docstring,
    line-too-long,
    too-few-public-methods,
    too-many-arguments,
    singleton-comparison,
    consider-using-namedtuple-or-dataclass,
    consider-using-assignment-expr, # Remove when Python >= 3.8 required

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable=
    c-extension-no-member,

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-allow-list=
    numpy,
    zmq,

# Files or directories to be skipped. They should be base names, not paths.
ignore=
    .git,
    __pycache__,
    .vscode,
    .gitlab,
    coverage,
    configs,
    logs,
    notebooks,
    build,
    dist,
    gen,
    db,
    debugging,
    plots,

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs=10

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins=
    pylint.extensions.code_style,
    pylint.extensions.comparison_placement,
    pylint.extensions.confusing_elif,
    pylint.extensions.bad_builtin,
    pylint.extensions.check_elif,

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format=colorized

# Pickle collected data for later comparisons.
persistent=no

# Activate the evaluation score.
score=yes

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode=no


[BASIC]

# Naming style matching correct argument names.
argument-naming-style=snake_case

# Naming style matching correct attribute names.
attr-naming-style=snake_case

# Bad variable names which should always be refused, separated by a comma.
bad-names=foo,
          bar,
          baz,
          toto,
          tutu,
          tata,

# Naming style matching correct class attribute names.
class-attribute-naming-style=any

# Naming style matching correct class names.
class-naming-style=PascalCase

# Naming style matching correct constant names.
const-naming-style=UPPER_CASE

# Naming style matching correct function names.
function-naming-style=camelCase

# Good variable names which should always be accepted, separated by a comma.
good-names=i,
           j,
           k,
           ex,
           Run,
           _,
           ii,
           jj,
           kk,
           a,
           b,
           c,
           jd,
           mu,

# Include a hint for the correct naming format with invalid-name.
include-naming-hint=no

# Naming style matching correct inline iteration names.
inlinevar-naming-style=any

# Naming style matching correct method names.
method-naming-style=camelCase

# Naming style matching correct module names.
module-naming-style=snake_case

# Naming style matching correct variable names.
variable-naming-style=snake_case


[EXCEPTIONS]

# Exceptions that will emit a warning when caught
overgeneral-exceptions=
    BaseException,
    Exception,


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=LF

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,
      XXX,
      TODO,
      NOTE,
      REVIEW,


[TYPECHECK]

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=
    optparse.Values,
    thread._local,
    _thread._local,
    argparse.Namespace,

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint=no

# ZMQ sockets are dynamically generated and so pylint doesn't see them,
# causing false positives.
generated-members=
    NOBLOCK,
    REQ,
    REP,
    ROUTER,
    DEALER,
    PUSH,
    PULL,
